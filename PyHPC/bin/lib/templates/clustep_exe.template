#%(csh_interp)s
#
#   INFO:
# $PYTHON_MODULE_LOAD -> This indicates if we need to load a separate module first.
#   $PYTHON_MODULE_SCRIPT -> This is then the script necessary to load the correct python modules.
# $ PYTHON -> this is the name of the python executable once configured.
# $ COMPONENTS -> The number of different components to generate.
# $ WORK_DIR -> the clustep execution location
# $ TEMP_DIR -> The relavent temp directory.
# $ OUTPUT_DIR -> The correct output location for the final product.

#----------------------------------------------------#
# Managing modules ==================================#
#----------------------------------------------------#
setenv MSG "%(fdbg)s"

%(python_env_script)s

setenv PYTHON %(python_exec)s
setenv SNAPGADGET %(snapgadget)s
$PYTHON_MODULE_SCRIPT # Loading python if needed


#----------------------------------------------------#
# Managing Core variables ===========================#
#----------------------------------------------------#
setenv COMPONENTS %(components)d # Stores the number of components
echo "$MSG Found $COMPONENTS components to generate..."

# Multiple components
setenv SUB_OUTPUT_DIR "%(temp_dir)s"
echo "$MSG sub_output_directory = $SUB_OUTPUT_DIR"

#----------------------------------------------------#
# Managing output location ==========================#
#----------------------------------------------------#

setenv OUTPUT_DIR "%(output_dir)s"
echo "$MSG Checking output directory $OUTPUT_DIR for viability..."

if ( ! -d "$OUTPUT_DIR" ) then
  echo "$MSG    Failed to find $OUTPUT_DIR, attempting to generate it..."
  mkdir --parents $OUTPUT_DIR
  echo "$MSG    [FINISHED]"
  echo "$MSG[FINISHED]"
else
  echo "$MSG [FINISHED]"
endif

#------------------------------------------------------#
# Managing the working directory                       #
#------------------------------------------------------#
setenv TEMP_DIR "%(temp_dir)s"
setenv WORK_DIR "%(working_directory)s"
setenv OUTPUT_NAME "%(output_name)s"
echo "$MSG working directory = $WORK_DIR"

#------------------------------------------------------#
# Creating the list of execution instruction ========= #
#------------------------------------------------------#

ls "$TEMP_DIR" | grep ".ini" > "$TEMP_DIR/exec.txt"

cd "$WORK_DIR"

echo "$MSG Generating the components..."

foreach v (`cat $TEMP_DIR/exec.txt`)
  $PYTHON "clustep.py" -i "$TEMP_DIR/$v" -o "$SUB_OUTPUT_DIR/`echo $v | sed 's|.ini||g'`.dat"
  echo "$MSG clustep.py" -i "$TEMP_DIR/$v" -o "$SUB_OUTPUT_DIR/`echo $v | sed 's|.ini||g'`.dat"
end
echo "$MSG[FINISHED]"

#------------------------------------------------------#
# Managing the snapgadget region ===================== #
#------------------------------------------------------#
if ( $COMPONENTS == 1 ) then
  mv "$SUB_OUTPUT_DIR/Cluster1.dat" "$OUTPUT_NAME"
else
    echo "$MSG Finished generating the necessary .dat files. Combining..."

  foreach v (`cat $TEMP_DIR/snapgadget_directive.txt`)
    $PYTHON $SNAPGADGET `echo $v | sed 's|+| |g' `
    echo "$MSG$SNAPGADGET `echo $v | sed 's|+| |g' `"
  end

  mv "$SUB_OUTPUT_DIR/temp.dat" "$OUTPUT_NAME"
endif

#------------------------------------------------------#
# Clearing the temp file ============================= #
#------------------------------------------------------#
rm -r $TEMP_DIR
echo "$MSG[FINISHED]"





