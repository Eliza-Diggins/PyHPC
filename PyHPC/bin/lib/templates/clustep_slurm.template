#%(csh_interp)s
#-------------------------------------------------------------------#
# RAMSES runtime script --> SLURM                                   #
#-------------------------------------------------------------------#
%(batch_options)s
#
#   INFO:
# $PYTHON_MODULE_LOAD -> This indicates if we need to load a separate module first.
#   $PYTHON_MODULE_SCRIPT -> This is then the script necessary to load the correct python modules.
# $ PYTHON -> this is the name of the python executable once configured.
# $ COMPONENTS -> The number of different components to generate.
# $ WORK_DIR -> the clustep execution location
# $ TEMP_DIR -> The relavent temp directory.
# $ OUTPUT_DIR -> The correct output location for the final product.

#----------------------------------------------------#
# Managing modules ==================================#
#----------------------------------------------------#

%(python_env_script)s


setenv PYTHON %(python_exec)s
setenv SNAPGADGET %(snapgadget)s

ml parallel

#----------------------------------------------------#
# Managing Core variables ===========================#
#----------------------------------------------------#
setenv COMPONENTS %(components)d # Stores the number of components
echo "Found $COMPONENTS components to generate..."

# Multiple components
setenv SUB_OUTPUT_DIR "%(temp_dir)s"
echo "sub_output_directory = $SUB_OUTPUT_DIR"

#----------------------------------------------------#
# Managing output location ==========================#
#----------------------------------------------------#

setenv OUTPUT_DIR "%(output_dir)s"
echo "Checking output directory $OUTPUT_DIR for viability..."

if ( ! -d "$OUTPUT_DIR" ) then
  echo "    Failed to find $OUTPUT_DIR, attempting to generate it..."
  mkdir --parents $OUTPUT_DIR
  echo "    [FINISHED]"
  echo "[FINISHED]"
else
  echo "[FINISHED]"
endif

#------------------------------------------------------#
# Managing the working directory                       #
#------------------------------------------------------#
setenv TEMP_DIR "%(temp_dir)s"
setenv WORK_DIR "%(working_directory)s"
setenv OUTPUT_NAME "%(output_name)s"
setenv SLURM_OUTPUT "%(slurm_out)s"
echo "working directory = $WORK_DIR"

#------------------------------------------------------#
# Creating the list of execution instruction ========= #
#------------------------------------------------------#

ls "$TEMP_DIR" | grep ".ini" > "$TEMP_DIR/exec.txt"
sed s'|.ini|.dat|g' "$TEMP_DIR/exec.txt" > "$TEMP_DIR/exec2.txt"
cd "$WORK_DIR"

echo "Generating the components..."

#------------------------------------------------------#
# Preparing to Parallelize =========================== #
#------------------------------------------------------#
setenv OMP_NUM_THREADS 1
setenv SRUN "srun --exclusive --ntasks 1"

echo "Generating the executable"

parallel --link --max-procs "$SLURM_NTASKS" --joblog "$SLURM_OUTPUT"  "$SRUN $PYTHON clustep.py -i $TEMP_DIR/{1} -o $SUB_OUTPUT_DIR/{2}" :::: $TEMP_DIR/exec.txt :::: $TEMP_DIR/exec2.txt

echo "[Finished]"

#------------------------------------------------------#
# Managing the snapgadget region ===================== #
#------------------------------------------------------#
if ( $COMPONENTS == 1 ) then
  mv "$SUB_OUTPUT_DIR/Cluster1.dat" "$OUTPUT_NAME"
else
    echo "Finished generating the necessary .dat files. Combining..."

  foreach v (`cat $TEMP_DIR/snapgadget_directive.txt`)
    $PYTHON "$SNAPGADGET `echo $v | sed 's|+| |g' `"
  end

  mv "$SUB_OUTPUT_DIR/temp.dat" "$OUTPUT_NAME"
endif

#------------------------------------------------------#
# Clearing the temp file ============================= #
#------------------------------------------------------#
echo "Deleting temporary files..."
cd $TEMP_DIR
cd ../..
./clear_temp.sh $TEMP_DIR &
echo "[FINISHED]"






